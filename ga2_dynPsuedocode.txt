MinLockers(balls[1,...,n], keys[1,...,n], n, B, K):
int d[B]
d[0] = 0;
	
for i = 1 to N
	if balls[i] == 0	// There is no ball
		d[i] = d[i-1]
	else if balls[i] == 1 and keys[i] == 0	// There is a ball, but we don't have the key
		distance = Dist(balls, keys, i, n)	// How many lockers need to be opened to get to the key
		d[i] = 1 + distance + d[i-distance]
	else if balls[i] == 1 and keys[i] == 1	// There is a ball and we have the key
		d[i] = 1 + d[i-1]
		
return d[n]
			
			
Dist(balls[1,...,n], keys[1,...,n], i, n):
// Search above the ball location
for j = i+1 to n-1
	if keys[j] == 1
		distance = j - i
		if distance < minDistance
			minDistance = distance
			firstLoop = true
			secondLoop = false

// Search below the ball location
for k = i-1 to 0
	if keys[k] == 1
		distance = i - k
		if distance < minDistance
			minDistance = distance
			firstLoop = false
			secondLoop = true
			
if firstLoop
	for k = i to i+minDistance
		keys[k-1] = 1
		keys[k+1] = 1
else if secondLoop
	for j = i-minDistance to i
		keys[j-1] = 1
		keys[j+1] = 1
		
return minDistance
