#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <ctime>

#define SIZE 10

using namespace std;

int DivideAndConquer(int [], int);
int SuffixPrefix(int [], int[], int, int);

int partition(int arr[], int lo, int hi)
{
    int pivot = arr[hi];
    int i = lo;

    for (int j = lo; j < hi; j++)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        i++;
    }
    int temp = arr[i];
    arr[hi] = arr[i];
    arr[i] = temp;

    return i;
}

void quicksort(int arr[], int lo, int hi)
{
    int p;
    if (lo < hi)
    {
        p = partition(arr, lo, hi);
        quicksort(arr, lo, p-1);
        quicksort(arr, p+1, hi);
    }
}

int main()
{
    string line;

    //ifstream myfile ("test.txt");
    ifstream myfile ("test_cases_without_solutions.txt");
    if(myfile.is_open()){
        cout << "Read test cases .txt file" << "\n";
        bool endOfLine = false;
        while(getline(myfile, line)){
            stringstream ss(line);
            string value;
            int intValue;
            vector<int> valuesV;
            while(getline(ss, value, ',')){
                size_t foundB = value.find("[");
                if(foundB != string::npos){
                    value = value.substr(1, value.length());
                }
                size_t foundB1 = value.find("]");
                if(foundB1 != string::npos){
                    value = value.substr(1, value.length()-1);
                    endOfLine = true;
                }
                intValue = atoi(value.c_str());
                valuesV.push_back(intValue);
                if(endOfLine == true){
                    int size = valuesV.size();
                    int* arrayN = new int[size];
                    //print out what we read in
                    for(int i = 0; i < valuesV.size(); i++){
                        //cout << valuesV[i] << ", ";
                        arrayN[i] = valuesV[i];
                    }
                    cout << endl;
                    //do the algorithm
                    clock_t timer = clock();
                    int result = DivideAndConquer(arrayN, size);
                    double duration = (clock() - timer) / (double) CLOCKS_PER_SEC;
                    cout << result << endl;
                    cout << "Took " << duration * 1000 << " ms secs for " << size << " elements.\n";
                    //end
                    endOfLine = false;
                    valuesV.clear();
                    break;
                }
            }
        }
        myfile.close();
    }else{
        cout << "can't open the test cases *.txt file (required the file to be in the same location in order to run) \n";
    }

    return 0;
}

int DivideAndConquer(int arr[], int n)
{
    if (n == 1)
    {
//		cout << "Base case!!!" << endl;
        return abs(arr[0]);
    }

    int n_half = n / 2;
    int* first = new int[n];
    int* second = new int[n];
    int* suffix = new int[n];
    int* prefix = new int[n];
    int count = n_half - 1;


//	cout<< "start DivideAndConquer"<<endl;

    // The first array of suffix  sums
    for (int i = count; i >= 0; i--)
    {
        first[i] = arr[i];
        if (i == count)
            suffix[i] = arr[i];
        else
            suffix[i] = arr[i+1] + arr[i];	// Previous sum plus element value
    }

    // The second array of prefix sums
    for (int i = n_half; i < n; i++)
    {
        second[i-n_half] = arr[i];
        if (i == n_half)
            prefix[i-n_half] = arr[i];
        else
            prefix[i-n_half] = arr[i-1] + arr[i];
    }

//	cout<< "after second loop"<<endl;

    int min1 = 0, min2 = 0, min3 = 0;
    min1 = DivideAndConquer(first, n_half);
    min2 = DivideAndConquer(second, n-n_half);
    min3 = SuffixPrefix(suffix, prefix, n_half, n-n_half);

    if(min1 < min2 && min1 < min3)
    {
        return min1;
    }
    else if(min2 < min1 && min2 < min3)
    {
        return min2;
    }
    else
    {
        return min3;
    }


    //return min(min3, min(min1, min2));
}
int SuffixPrefix(int first[], int second[], int n, int m)
{
    // Put sorts in here
    quicksort(first, 0, n);
    quicksort(second, 0, m);

    int iFinal, jFinal;
    int min = 65535;	// Largest 8bit int
    int prev = 65535;
    int sum;

    for (int i = n-1; i >= 0; i--)
    {
        for (int j = 0; j < m; j++)
        {
//            cout << "FIRST: " << first[i] << " SECOND: " << second[j] << endl;
            sum = abs(first[i] + second[j]);
//            cout << "SUM: " << sum << endl;
            if (sum > prev)	// The sum will now be going up because they are sorted
            {
//                cout << "Going up now, stop." << endl;
                break;
            }
            prev = sum;
            if (sum < min)
            {
//                cout << "Sum now becoming minimum." << endl;
                min = sum;
                iFinal = i;
                jFinal = j;
            }
        }
    }

    return min;
}
