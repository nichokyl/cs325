from pulp import *
import math

x0 = LpVariable("x0")
x1 = LpVariable("x1")
x2 = LpVariable("x2")
x3 = LpVariable("x3")
x4 = LpVariable("x4")
x5 = LpVariable("x5")
q =  LpVariable("q")

prob = LpProblem("myProblem", LpMinimize)

# The objective function is added to 'prob' first
prob += q

# Thanks to senderle on Stack Overflow for help with I/O
fi = open("Data.txt", "r")

for columns in (row.strip().split("\t") for row in fi):
    #print columns[0] + "\t" + columns[1]
    
    # The two constraints are entered
    prob += ((x0)+(x1 * int(columns[1]))+(x2*math.cos((2*math.pi*int(columns[1]))/(365.25)))+(x3*math.sin((2*math.pi*int(columns[1]))/(365.25)))+(x4*math.cos((2*math.pi*int(columns[1]))/(365.25*10.7)))+(x5*math.sin((2*math.pi*int(columns[1]))/(365.25*10.7)))) - float(columns[0]) <= q
    prob += ((x0)+(x1 * int(columns[1]))+(x2*math.cos((2*math.pi*int(columns[1]))/(365.25)))+(x3*math.sin((2*math.pi*int(columns[1]))/(365.25)))+(x4*math.cos((2*math.pi*int(columns[1]))/(365.25*10.7)))+(x5*math.sin((2*math.pi*int(columns[1]))/(365.25*10.7)))) - float(columns[0]) >= -q

# The problem data is written to an .lp file
prob.writeLP("TempModel.lp")
status = prob.solve()
print "status: %s" % LpStatus[status]
for v in prob.variables():
    print "%s = %f" % (v.name, v.varValue)
# The optimised objective function value is printed to the screen
print "myProblem = %f" % value(prob.objective)
